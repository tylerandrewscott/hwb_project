levels(sd[,12])<-c(0,1,3,12,52)
#Q13: work with others in community
levels(sd[,13])<-c(0,1,3,12,52)
#Q14: trust local policy makers
levels(sd[,14])<-c(1,.66,.5,.33,0)
#Q15: trust experts
levels(sd[,15])<-c(1,.66,.5,.33,0)
out<-sd
for(i in 1:ncol(out)){
out[,i]<-as.double(out[,i])
}
out<-out
for(i in 1:ncol(out)){
out[,i]<-ordered(out[,i])
}
sd<-out
colnames(sd)<-paste('Q',seq(1,15,1),sep='')
require(snow)
require(mi)
require(lme4)
require(plyr)
#generate 2000 designs
tempA<-rlply(.n=1000,
.expr=makedesign(nblocks=12,qsperblock=6,screeners=c(4,1),numqs=15,maxoccurence=4,blocksim=4))
temp1<-lapply(1:length(tempA), function(x) fakesample(design=tempA[[x]],data=sd,numinblock=400))
length(tempA)
tempA<-rlply(.n=2000,
.expr=makedesign(nblocks=12,qsperblock=6,screeners=c(4,1),numqs=15,maxoccurence=4,blocksim=4))
head(tempA)
fakesample
head(sd)
sd
lapply(1:1, function(x) fakesample(design=tempA[[x]],data=sd,numinblock=400))
temp1<-lapply(1:10, function(x) fakesample(design=tempA[[x]],data=sd,numinblock=400))
head(temp1)
?which.min
#SIMULATE A BLOCK DESIGN
makedesign <- function(nblocks,qsperblock,screeners,numqs,maxoccurence,blocksim)
{
repeat{
design<-matrix(0,ncol=qsperblock,nrow=nblocks)
for(p in 1:length(screeners)){design[,p]<-screeners[p]}
#generate sample list
for (i in 1:1)
{for(q in (length(screeners)+1):ncol(design)){
possibleqs<-seq(1,numqs,1)[tabulate(design,nbins=numqs)<maxoccurence]
#is question already in design?
s1<-c(possibleqs[possibleqs %in% design[1,]==FALSE])
s<-ifelse(length(s1)>1,sample(s1,1),s1)
design[i,q]<-s}}
for (i in 2:nblocks)
{for (q in (length(screeners)+1):ncol(design)){
repeat{
possibleqs<-seq(1,numqs,1)[tabulate(design,nbins=numqs)<maxoccurence]
#is question already in design?
s1<-c(possibleqs[possibleqs %in% design[i,]==FALSE])
s<-ifelse(length(s1)>1,sample(s1,1),s1)
s<-ifelse(is.na(s)==TRUE,which.min(tabulate(design))[1],s)
s<-ifelse(s %in% design[i,] == TRUE, which.min(tabulate(design[-s]))[1],s)
design[i,q]<-s
if((all((colSums(sapply(1:(i-1),function(x) design[x,(length(screeners)+1):qsperblock] %in%
design[i,(length(screeners)+1):qsperblock])))<=blocksim))& (sum(s %in% design[i,])<2))
{break}
}}
}
if(all(is.na(design)==FALSE))
{break}}
return(design)}
tempA<-rlply(.n=2,
.expr=makedesign(nblocks=12,qsperblock=6,screeners=c(4,1),numqs=15,maxoccurence=4,blocksim=4))
tempA
tempA<-rlply(.n=2000,
.expr=makedesign(nblocks=12,qsperblock=6,screeners=c(4,1),numqs=15,maxoccurence=4,blocksim=4))
#generate 16 fake datasets based upon 16 designs
temp1<-lapply(1:10, function(x) fakesample(design=tempA[[x]],data=sd,numinblock=400))
temp1<-lapply(1:length(tempA), function(x) fakesample(design=tempA[[x]],data=sd,numinblock=400))
tempA[[39]]
tabulate(tempA[[39]])
sapply(1:12, function(x) tabulate(tempA[[39]][x,]))
all(sapply(1:12, function(x) tabulate(tempA[[39]][x,]))<2)
(sapply(1:12, function(x) all(tabulate(tempA[[39]][x,])<2)))
all((sapply(1:12, function(x) all(tabulate(tempA[[39]][x,])<2)))==TRUE)
ttt<-tempA[[39]]
all((sapply(1:12, function(x) all(tabulate(ttt[x,])<2)))==TRUE)
#SIMULATE A BLOCK DESIGN
makedesign <- function(nblocks,qsperblock,screeners,numqs,maxoccurence,blocksim)
{
repeat{
design<-matrix(0,ncol=qsperblock,nrow=nblocks)
for(p in 1:length(screeners)){design[,p]<-screeners[p]}
#generate sample list
for (i in 1:1)
{for(q in (length(screeners)+1):ncol(design)){
possibleqs<-seq(1,numqs,1)[tabulate(design,nbins=numqs)<maxoccurence]
#is question already in design?
s1<-c(possibleqs[possibleqs %in% design[1,]==FALSE])
s<-ifelse(length(s1)>1,sample(s1,1),s1)
design[i,q]<-s}}
for (i in 2:nblocks)
{for (q in (length(screeners)+1):ncol(design)){
repeat{
possibleqs<-seq(1,numqs,1)[tabulate(design,nbins=numqs)<maxoccurence]
#is question already in design?
s1<-c(possibleqs[possibleqs %in% design[i,]==FALSE])
s<-ifelse(length(s1)>1,sample(s1,1),s1)
s<-ifelse(is.na(s)==TRUE,which.min(tabulate(design))[1],s)
design[i,q]<-s
if((all((colSums(sapply(1:(i-1),function(x) design[x,(length(screeners)+1):qsperblock] %in%
design[i,(length(screeners)+1):qsperblock])))<=blocksim)))
{break}
}}
}
if(all(is.na(design)==FALSE)&
all((sapply(1:nblocks, function(x) all(tabulate(design[x,])<2)))==TRUE))
{break}}
return(design)}
tempA<-rlply(.n=2000,
.expr=makedesign(nblocks=12,qsperblock=6,screeners=c(4,1),numqs=15,maxoccurence=4,blocksim=4))
temp1<-lapply(1:length(tempA), function(x) fakesample(design=tempA[[x]],data=sd,numinblock=400))
require(doParallel)
?clusterApply
?mi
10*2000
10*2000/60
5*2000/60
166/16
cl<-makeCluster(16)
registerDoParallel(cl)
multimputesA<-foreach(i =1:length(temp1),
.packages=c('mi')) %dopar% mi(object=temp1[[i]],n.iter=20,
max.minutes=8,check.coef.convergence=TRUE,
add.noise=FALSE)
stopCluster(cl)
save.image('searchfordesign.sim3.RData')
mi(object=temp1[[1]],n.iter=20,
max.minutes=8,check.coef.convergence=TRUE,
add.noise=FALSE)
temp1[[1]]
?mi
mi.info(temp1[[1]])
?rlply
?lply
?lpply
?llply
mi.info(tempA[[1]])
mi.info(temp2[[1]])
mi.info(temp1[[1]])
temp2 <- llply(.data=temp1, .fun= mi.info)
?tabulate
tempA[[1]]
tabulate(tempA[[1]])
mi.info(temp1[[8]])
tabulate(tempA[[8]])
tabulate(tempA[[8]],nbins=16)
all(tabulate(tempA[[8]],nbins=16)>0)
#setwd('//Users/TScott/hwb_project')
setwd('C:/Users/tscott1/Documents/GitHub/hwb_project')
rm(list=ls())
#SIMULATE A BLOCK DESIGN
makedesign <- function(nblocks,qsperblock,screeners,numqs,maxoccurence,blocksim)
{
repeat{
design<-matrix(0,ncol=qsperblock,nrow=nblocks)
for(p in 1:length(screeners)){design[,p]<-screeners[p]}
#generate sample list
for (i in 1:1)
{for(q in (length(screeners)+1):ncol(design)){
possibleqs<-seq(1,numqs,1)[tabulate(design,nbins=numqs)<maxoccurence]
#is question already in design?
s1<-c(possibleqs[possibleqs %in% design[1,]==FALSE])
s<-ifelse(length(s1)>1,sample(s1,1),s1)
design[i,q]<-s}}
for (i in 2:nblocks)
{for (q in (length(screeners)+1):ncol(design)){
repeat{
possibleqs<-seq(1,numqs,1)[tabulate(design,nbins=numqs)<maxoccurence]
#is question already in design?
s1<-c(possibleqs[possibleqs %in% design[i,]==FALSE])
s<-ifelse(length(s1)>1,sample(s1,1),s1)
s<-ifelse(is.na(s)==TRUE,which.min(tabulate(design))[1],s)
design[i,q]<-s
if((all((colSums(sapply(1:(i-1),function(x) design[x,(length(screeners)+1):qsperblock] %in%
design[i,(length(screeners)+1):qsperblock])))<=blocksim))&
all(tabulate(design,nbins=numqs)>0))
{break}
}}
}
if(all(is.na(design)==FALSE)&
all((sapply(1:nblocks, function(x) all(tabulate(design[x,])<2)))==TRUE))
{break}}
return(design)}
#GENERATE MULTIPLE BLOCK DESIGNS
multdesigns <- function(ndesigns,nblocks,qsperblock,screeners,numqs,maxoccurence,blocksim)
{
designs <- list()
for (i in 1:ndesigns)
{
designs[[i]]<-as.data.frame(makedesign(nblocks,qsperblock,screeners,numqs,maxoccurence,blocksim))
}
return(designs)
}
#Build Fake Data for 1 design
fakesample<-function(design,data,numinblock)
{
nb <- nrow(design)
total<-numinblock*nb
allblocks<-data.frame(matrix(NA,nrow=total,ncol=ncol(data)))
for(i in 1:nb)
{
beg<-1+(numinblock*(i-1))
end<-numinblock+(numinblock*(i-1))
#sample from observed complete individuals
whichpeople<-as.vector(sample(1:nrow(data),numinblock,replace=TRUE))
#which questions to draw
whichqs<- c(unlist(design[i,]))
#pull from observed data, questions in mm
df<-(data[whichpeople,whichqs])#;colnames(df)<-seq(1,ncol(design),1)
allblocks[beg:end,whichqs]<-df
rownames(allblocks)<-seq(1,nrow(allblocks),1);colnames(allblocks)<-seq(1,ncol(allblocks),1)
}
return(allblocks)
}
rm(list=ls())
setwd('C:/Users/tscott1/Documents/GitHub/hwb_project')
source('scott_sampling_functions.R')
sd<-read.csv("bakerclass_pilot.csv")
sd<-sd[-26,]
levels(sd[,2])<-c("16-21","22-29","30-39","40-49","50-59")
levels(sd[,3])<-c("tac","pierce","balance","far")
#remove extra columns
sd<-sd[,4:18]
#convert letters to numbers
for(i in 1:ncol(sd)){
sd[,i]<-as.numeric(sd[,i])
}
#code numbers as strings
for(i in 1:ncol(sd)){
sd[,i]<-as.character(sd[,i])
}
#code levels for variables
#Q1: How long have you lived in PS
levels(sd[,1])<-c("1","1-3","4-10",">10")
#Q2: I am attached to Puget Sound region
levels(sd[,2])<-c(2,1,0,-1,-2)
#Q3: I identify with Puget Sound region
levels(sd[,3])<-c(2,1,0,-1,-2)
#Q4 How satisfied with life as whole
levels(sd[,4])<-c(2,1,0,-1,-2)
#Q5 How frequently feel inspired in nature
levels(sd[,5])<-c(1,.75,.5,.25,0)
#Q6 How frequently nature reduces stress
levels(sd[,6])<-c(1,.75,.5,.25,0)
#Q7: How often outdoor in Winter
levels(sd[,7])<-c(5,2,1,.25,0)
#Q8: How often outdoor in summer
levels(sd[,8])<-c(5,2,1,.25,0)
#Q9: How often gather resources
levels(sd[,9])<-c(0,1,2,3,4)
#Q10: able to harvest enough resources
levels(sd[,10])<-c(4,3,2,1)
#Q11: participate in cultural activties
levels(sd[,11])<-c(0,1,3,12,52)
#Q12: participate in environmental stewardship
levels(sd[,12])<-c(0,1,3,12,52)
#Q13: work with others in community
levels(sd[,13])<-c(0,1,3,12,52)
#Q14: trust local policy makers
levels(sd[,14])<-c(1,.66,.5,.33,0)
#Q15: trust experts
levels(sd[,15])<-c(1,.66,.5,.33,0)
out<-sd
for(i in 1:ncol(out)){
out[,i]<-as.double(out[,i])
}
out<-out
for(i in 1:ncol(out)){
out[,i]<-ordered(out[,i])
}
sd<-out
colnames(sd)<-paste('Q',seq(1,15,1),sep='')
require(snow)
require(mi)
require(lme4)
require(plyr)
#BUILD LIST OF FAKE DATA
#generate 2000 designs
tempA<-rlply(.n=2000,
.expr=makedesign(nblocks=12,qsperblock=6,screeners=c(4,1),numqs=15,maxoccurence=4,blocksim=4))
stopCluster(cl)
makedesign(nblocks=12,qsperblock=6,screeners=c(4,1),numqs=15,maxoccurence=4,blocksim=4)
#SIMULATE A BLOCK DESIGN
makedesign <- function(nblocks,qsperblock,screeners,numqs,maxoccurence,blocksim)
{
repeat{
design<-matrix(0,ncol=qsperblock,nrow=nblocks)
for(p in 1:length(screeners)){design[,p]<-screeners[p]}
#generate sample list
for (i in 1:1)
{for(q in (length(screeners)+1):ncol(design)){
possibleqs<-seq(1,numqs,1)[tabulate(design,nbins=numqs)<maxoccurence]
#is question already in design?
s1<-c(possibleqs[possibleqs %in% design[1,]==FALSE])
s<-ifelse(length(s1)>1,sample(s1,1),s1)
design[i,q]<-s}}
for (i in 2:nblocks)
{for (q in (length(screeners)+1):ncol(design)){
repeat{
possibleqs<-seq(1,numqs,1)[tabulate(design,nbins=numqs)<maxoccurence]
#is question already in design?
s1<-c(possibleqs[possibleqs %in% design[i,]==FALSE])
s<-ifelse(length(s1)>1,sample(s1,1),s1)
s<-ifelse(is.na(s)==TRUE,which.min(tabulate(design))[1],s)
design[i,q]<-s
if(all((colSums(sapply(1:(i-1),function(x) design[x,(length(screeners)+1):qsperblock] %in%
design[i,(length(screeners)+1):qsperblock])))<=blocksim))
{break}
}}
}
if(all(is.na(design)==FALSE)&
all((sapply(1:nblocks, function(x) all(tabulate(design[x,])<2)))==TRUE)&
all(tabulate(design,nbins=numqs)>0))
{break}}
return(design)}
makedesign(nblocks=12,qsperblock=6,screeners=c(4,1),numqs=15,maxoccurence=4,blocksim=4)
rm(list=ls())
setwd('C:/Users/tscott1/Documents/GitHub/hwb_project')
source('scott_sampling_functions.R')
sd<-read.csv("bakerclass_pilot.csv")
sd<-sd[-26,]
levels(sd[,2])<-c("16-21","22-29","30-39","40-49","50-59")
levels(sd[,3])<-c("tac","pierce","balance","far")
#remove extra columns
sd<-sd[,4:18]
#convert letters to numbers
for(i in 1:ncol(sd)){
sd[,i]<-as.numeric(sd[,i])
}
#code numbers as strings
for(i in 1:ncol(sd)){
sd[,i]<-as.character(sd[,i])
}
#code levels for variables
#Q1: How long have you lived in PS
levels(sd[,1])<-c("1","1-3","4-10",">10")
#Q2: I am attached to Puget Sound region
levels(sd[,2])<-c(2,1,0,-1,-2)
#Q3: I identify with Puget Sound region
levels(sd[,3])<-c(2,1,0,-1,-2)
#Q4 How satisfied with life as whole
levels(sd[,4])<-c(2,1,0,-1,-2)
#Q5 How frequently feel inspired in nature
levels(sd[,5])<-c(1,.75,.5,.25,0)
#Q6 How frequently nature reduces stress
levels(sd[,6])<-c(1,.75,.5,.25,0)
#Q7: How often outdoor in Winter
levels(sd[,7])<-c(5,2,1,.25,0)
#Q8: How often outdoor in summer
levels(sd[,8])<-c(5,2,1,.25,0)
#Q9: How often gather resources
levels(sd[,9])<-c(0,1,2,3,4)
#Q10: able to harvest enough resources
levels(sd[,10])<-c(4,3,2,1)
#Q11: participate in cultural activties
levels(sd[,11])<-c(0,1,3,12,52)
#Q12: participate in environmental stewardship
levels(sd[,12])<-c(0,1,3,12,52)
#Q13: work with others in community
levels(sd[,13])<-c(0,1,3,12,52)
#Q14: trust local policy makers
levels(sd[,14])<-c(1,.66,.5,.33,0)
#Q15: trust experts
levels(sd[,15])<-c(1,.66,.5,.33,0)
out<-sd
for(i in 1:ncol(out)){
out[,i]<-as.double(out[,i])
}
out<-out
for(i in 1:ncol(out)){
out[,i]<-ordered(out[,i])
}
sd<-out
colnames(sd)<-paste('Q',seq(1,15,1),sep='')
require(snow)
require(mi)
require(lme4)
require(plyr)
#BUILD LIST OF FAKE DATA
#generate 2000 designs
tempA<-rlply(.n=2000,
.expr=makedesign(nblocks=12,qsperblock=6,screeners=c(4,1),numqs=15,maxoccurence=4,blocksim=4))
temp1<-lapply(1:length(tempA), function(x) fakesample(design=tempA[[x]],data=sd,numinblock=400))
temp2 <- llply(.data=temp1, .fun= mi.info)
length(temp1)
class(temp1)
require(doParallel)
cl<-makeCluster(16)
registerDoParallel(cl)
temp2 <- llply(.data=temp1, .fun= mi.info, .parallel=TRUE, .paraopts= list(.package=c('mi')))
stopCluster(cl)
?llply
cl<-makeCluster(16)
registerDoParallel(cl)
temp2 <- llply(.data=temp1, .fun= mi.info, .parallel=TRUE, .paropts= list(.package=c('mi')))
stopCluster(cl)
?foreach
cl<-makeCluster(16)
registerDoParallel(cl)
temp2 <- llply(.data=temp1, .fun= mi.info, .parallel=TRUE, .paropts= list(.packages=c('mi')))
stopCluster(cl)
temp2 <- llply(.data=temp1, .fun= mi.info) # .parallel=TRUE, .paropts= list(.packages=c('mi')))
temp2[[1]]
?mi
mi(object=temp1[[1]],info=temp2[[1]],n.iter=30,max.minutes=8,check.coef.convergence=TRUE)
mi(object=temp1[[1]])
temp1[[1]]
temp2[[1]]
400*12
mi(object=temp1[[1]],info=temp2[[1]])
temp1[[1]]
temp2[[1]]
mi(temp1[[1]])
mi(temp2[[1]])
mi(temp1[[1]])
is.data.frame(temp2[[1]])
mi(object=as.data.frame(temp1[[1]]),info=temp2[[1]])
as.data.frame(temp1[[1]])
mi(as.data.frame(temp1[[1]]))
is.data.frame(temp1[[1]])
is.data.frame(temp1[[1]])
mi(temp1[[1]])
mi(temp1[[1]],info-temp2[[1]])
mi(temp1[[1]],info=temp2[[1]])
require(mi)
temp1[[1]]
is.na(temp1[[1]])
mi(temp1[[1]])
?terms.formula
mi
colnames(temp1[[1]])
paste0('X',colnames(temp1[[1]]))
colnames(temp1[[1]])<-paste0('X',colnames(temp1[[1]]))
head(temp1[[1]])
mi(temp1[[1]])
mi(temp1[[1]])
apply(1:length(temp1) function(x) colnames(temp1[[x]]) <- paste0('X',colnames(temp1[[x]])))
for (i in 1:length(temp1))
{
colnames(temp1[[i]])<-paste0('X',colnames(temp1[[i]]))
}
?rlply
?llply
?foreach
cl<-makeCluster(16)
registerDoParallel(cl)
multimputesA<-foreach(i = 1:length(temp1),
.packages=c('mi')) %dopar% mi(object=temp1[[i]],info=temp2[[i]],n.iter=20,
max.minutes=8,check.coef.convergence=TRUE,
add.noise=FALSE)
stopCluster(cl)
save.image('runmiresults.RData')
colnames(temp1[[997]])
rownames(temp1[[997]])
?llply
llply(.data=temp1, .fun=mi)
#change colnames of fake data to 'X1' etc.
for (i in 1:length(temp1))
{
colnames(temp1[[i]])<-paste0('X',seq(1,15,1))
}
llply(.data=temp1, .fun=mi)
stopCluster(cl)
?llply
llply(.data=temp1, .fun=mi(n.iter=20,check.coef.convergence=TRUE,add.noise=FALSE,max.minutes=8),
.parallel=TRUE,.paropts = list(.packages='mi',.verbose=TRUE))
llply(.data=temp1, .fun=mi,
n.iter=20,check.coef.convergence=TRUE,add.noise=FALSE,max.minutes=8,
.parallel=TRUE,.paropts = list(.packages='mi',.verbose=TRUE))
colnames(temp1[[997]])
cl<-makeCluster(16)
registerDoParallel(cl)
multimputesA<-
llply(.data=temp1, .fun=mi,
n.iter=20,check.coef.convergence=TRUE,add.noise=FALSE,max.minutes=8,
.parallel=TRUE,.paropts = list(.packages='mi',.verbose=TRUE))
stopCluster(cl)
cl<-makeCluster(16)
registerDoParallel(cl)
multimputesA<-
llply(.data=temp1, .fun=mi,
n.iter=20,check.coef.convergence=TRUE,add.noise=FALSE,max.minutes=8,
.parallel=TRUE,.paropts = list(.packages='mi',.verbose=TRUE),.progress='tk')
stopCluster(cl)
save.image('runmiresults.RData')
length(multimputesA)
multimputesA[[1]]
names(multimputesA[[1]])
test<-multimputesA[[1]]
test$R.hat
summary(test)
values(test)
unlist(test)
is.list(multimputesA)
test$converged
class(test)
test['converged']
test[7]
test
#run imputation on each fake dataset
cl<-makeCluster(16)
registerDoParallel(cl)
da<-llply(.data=multimputesA, .fun=mi.completed, .parallel=TRUE,
.paropts = list(.packages='mi',.verbose=TRUE))
